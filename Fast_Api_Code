from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import numpy as np
from io import BytesIO
from PIL import Image
import tensorflow as tf
import os

app = FastAPI()

# CORS settings
origins = [
    "http://localhost",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Get the current directory path
current_dir = os.path.dirname(os.path.abspath(__file__))

# Specify the path to the SavedModel directory relative to the current directory
model_dir = os.path.join(current_dir, "../../Saved_Models/6")

# Check if the model directory exists
if not os.path.exists(model_dir):
    raise FileNotFoundError(f"The model directory '{model_dir}' does not exist.")

# Load the model using custom objects for the deprecated loss function
custom_objects = {'sparse_softmax_cross_entropy': tf.keras.losses.sparse_categorical_crossentropy}
try:
    MODEL = tf.keras.models.load_model(model_dir, custom_objects=custom_objects, compile=False)
except Exception as e:
    raise HTTPException(status_code=500, detail=f"Error loading model: {str(e)}")

CLASS_NAMES = ["Tomato__Target_Spot", "Tomato_Late_blight", "Tomato_healthy","Tomato__Tomato_mosaic_virus","Tomato__Tomato_YellowLeaf__Curl_Virus","Tomato_Bacterial_spot","Tomato_Early_blight","Tomato_Leaf_Miner","Tomato_Leaf_Mold","Tomato_Septoria_leaf_spot","Tomato_Spider_mites_Two_spotted_spider_mite"]

@app.get("/ping")
async def ping():
    return "Hello, I am alive"

def read_file_as_image(data) -> np.ndarray:
    image = np.array(Image.open(BytesIO(data)))
    return image

@app.post("/predict")
async def predict(
    file: UploadFile = File(...)
):
    try:
        image = read_file_as_image(await file.read())
        img_batch = np.expand_dims(image, 0)
        
        predictions = MODEL.predict(img_batch)

        # Check if predictions exist and have at least one element
        if predictions is not None and len(predictions) > 0:
            predicted_class_index = np.argmax(predictions[0])
            if predicted_class_index < len(CLASS_NAMES):
                predicted_class = CLASS_NAMES[predicted_class_index]
                confidence = float(np.max(predictions[0]))
                return {
                    'class': predicted_class,
                    'confidence': confidence
                }
            else:
                raise HTTPException(status_code=500, detail="Invalid predicted class index.")
        else:
            raise HTTPException(status_code=500, detail="Failed to predict class. Predictions list is empty.")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing prediction: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(app, host='localhost', port=8000)
